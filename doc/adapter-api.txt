BlueZ D-Bus Adapter API description
***********************************


Adapter hierarchy
=================

Service		org.bluez
Interface	org.bluez.Adapter1
Object path	[variable prefix]/{hci0,hci1,...}

Methods		void StartDiscovery()

			This method starts the device discovery session. This
			includes an inquiry procedure and remote device name
			resolving. Use StopDiscovery to release the sessions
			acquired.

			This process will start creating Device objects as
			new devices are discovered.

			Possible errors: org.bluez.Error.NotReady
					 org.bluez.Error.Failed

		void StopDiscovery()

			This method will cancel any previous StartDiscovery
			transaction.

			Note that a discovery procedure is shared between all
			discovery sessions thus calling StopDiscovery will only
			release a single session.

			Possible errors: org.bluez.Error.NotReady
					 org.bluez.Error.Failed
					 org.bluez.Error.NotAuthorized

#ifdef __TIZEN_PATCH__
		void StartCustomDiscovery(string pattern)

			This method starts the device discovery session with
			parameter. The valid paramter strings are "BREDR",
			"LE" or "LE_BREDR" which will perform the inquiry for
			appropriate types. This includes an inquiry procedure
			and remote device name resolving. Use StopDiscovery
			to release the sessions acquired.

			This process will start creating Device objects as
			new devices are discovered.

			Possible errors: org.bluez.Error.NotReady
					 org.bluez.Error.Failed

		void StartLEDiscovery()

			This method starts the LE device discovery session.
			General discovery and active scan is default.
			Use StopLEDiscovery to release the sessions
			acquired.

			This process will start emitting DeviceFound and
			PropertyChanged "LEDiscovering" signals.

			Possible errors: org.bluez.Error.NotReady
					 org.bluez.Error.Failed

		void StopLEDiscovery()

			This method will cancel any previous StartLEDiscovery
			transaction.

			Note that a discovery procedure is shared between all
			discovery sessions thus calling StopLEDiscovery will only
			release a single session.

			Possible errors: org.bluez.Error.NotReady
					 org.bluez.Error.Failed
					 org.bluez.Error.NotAuthorized

		void SetAdvertising(boolean enable)

			This method is used to set LE advertising on a
			controller that supports it.

			This process will emit PropertyChanged "Advertising"
			signal.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void SetAdvertisingParameters(uint32 interval_min,
						uint32 interval_max, uint32 filter_policy,
						uint32 type)

			This method allows for setting the Low Energy
			advertising interval and advertising filter policy.
			It is only supported on controller with LE support.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.Failed

		void SetAdvertisingData(array{byte} value)

			This method is used to set LE advertising data on a
			controller that supports it.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void SetScanParameters(uint32 type, uint32 interval, uint32 window)

			This method allows for setting the Low Energy
			scan interval and window.
			It is only supported on controller with LE support.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.Failed

		void SetScanRespData(array{byte} value)

			This method is used to set LE scan response data on
			a controller that supports it.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void AddDeviceWhiteList(string address, uint32 address_type)

			This method is used to add LE device to White List for given
			address.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void RemoveDeviceWhiteList(string address, uint32 address_type)

			This method is used to remove LE device to White List for given
			address.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void ClearDeviceWhiteList()

			This method is used to clear LE device to White List

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.Failed

		void SetLePrivacy(boolean enable_privacy)

			This method is used to set/reset LE privacy feature for the local
			adapter when it supports the feature.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void SetManufacturerData(array{byte} value)

			This method is used to set Manufacturer data on a
			controller that supports it.

			Possible errors: org.bluez.Error.NotReady
					org.bluez.Error.InvalidArguments
					org.bluez.Error.Failed

		void CreateDevice(string address)

			Creates a new object path for a remote device. This
			method will connect to the remote device and retrieve
			all SDP records.

			Possible errors: org.bluez.Error.InvalidArguments
#endif

		void RemoveDevice(object device)

			This removes the remote device object at the given
			path. It will remove also the pairing information.

			Possible errors: org.bluez.Error.InvalidArguments
					 org.bluez.Error.Failed

Properties	string Address [readonly]

			The Bluetooth device address.

		string Name [readonly]

			The Bluetooth system name (pretty hostname).

			This property is either a static system default
			or controlled by an external daemon providing
			access to the pretty hostname configuration.

		string Alias [readwrite]

			The Bluetooth friendly name. This value can be
			changed.

			In case no alias is set, it will return the system
			provided name. Setting an empty string as alias will
			convert it back to the system provided name.

			When resetting the alias with an empty string, the
			property will default back to system name.

			On a well configured system, this property never
			needs to be changed since it defaults to the system
			name and provides the pretty hostname. Only if the
			local name needs to be different from the pretty
			hostname, this property should be used as last
			resort.

		uint32 Class [readonly]

			The Bluetooth class of device.

			This property represents the value that is either
			automatically configured by DMI/ACPI information
			or provided as static configuration.

		boolean Powered [readwrite]

			Switch an adapter on or off. This will also set the
			appropriate connectable state of the controller.

			The value of this property is not persistent. After
			restart or unplugging of the adapter it will reset
			back to false.

		boolean Discoverable [readwrite]

			Switch an adapter to discoverable or non-discoverable
			to either make it visible or hide it. This is a global
			setting and should only be used by the settings
			application.

			If the DiscoverableTimeout is set to a non-zero
			value then the system will set this value back to
			false after the timer expired.

			In case the adapter is switched off, setting this
			value will fail.

			When changing the Powered property the new state of
			this property will be updated via a PropertyChanged
			signal.

			For any new adapter this settings defaults to false.

		boolean Pairable [readwrite]

			Switch an adapter to pairable or non-pairable. This is
			a global setting and should only be used by the
			settings application.

			Note that this property only affects incoming pairing
			requests.

			For any new adapter this settings defaults to true.

		uint32 PairableTimeout [readwrite]

			The pairable timeout in seconds. A value of zero
			means that the timeout is disabled and it will stay in
			pairable mode forever.

			The default value for pairable timeout should be
			disabled (value 0).

		uint32 DiscoverableTimeout [readwrite]

			The discoverable timeout in seconds. A value of zero
			means that the timeout is disabled and it will stay in
			discoverable/limited mode forever.

			The default value for the discoverable timeout should
			be 180 seconds (3 minutes).

		boolean Discovering [readonly]

			Indicates that a device discovery procedure is active.

		array{string} UUIDs [readonly]

			List of 128-bit UUIDs that represents the available
			local services.

		string Modalias [readonly, optional]

			Local Device ID information in modalias format
			used by the kernel and udev.
#ifdef __TIZEN_PATCH__
		boolean LEDiscovering [readonly]

			Indicates that a device LE discovery procedure is active.

		string Version [readonly]

			 The Bluetooth version.
#endif
